#!/bin/bash
#ARG ARCH=amd64
ARG ARCH=arm32v7
ARG MAJOR=daffy
ARG BASE_TAG=${MAJOR}-${ARCH}

FROM duckietown/dt-ros-commons:${BASE_TAG}
WORKDIR /code


# here, we install the requirements, some requirements come by default
# you can add more if you need to in requirements.txt

#RUN python3 --version
# DO NOT MODIFY: your submission won't run if you do

#RUN apt-get update
RUN pip2 --version
RUN apt-get install -y --no-install-recommends gcc libc-dev git bzip2 python-tk software-properties-common
RUN apt-add-repository universe

RUN rm -rf /var/lib/apt/lists/*
RUN apt-get update
#RUN apt-get install python-pip
RUN which pip2

#RUN apt install python2-minimal
RUN apt-add-repository universe
RUN apt-get update
#RUN pip list
#RUN apt-get install python-pip
#RUN python -m pip --version pip
RUN pip2 install wheel
RUN pip2 install Cython

RUN apt-get install -y libhdf5-dev

RUN pip2 install h5py==2.9.0
RUN /bin/bash -c "cat /etc/os-release"
RUN /bin/bash -c "pip2 install enum34 --ignore-installed enum34"

RUN df -i
#RUN git clone https://github.com/tensorflow/tensorflow.git
#RUN cd tensorflow && git checkout r1.14 && chmod +x tensorflow/tools/ci_build/ci_build.sh && ./tensorflow/tools/ci_build/ci_build.sh
#RUN tensorflow/tools/ci_build/ci_build.sh PI tensorflow/tools/ci_build/pi/build_raspberry_pi.sh
#RUN pip install tensorflow-1.14.0-cp35-none-linux_armv7l.whl
#RUN pip install tensorflow


#RUN /bin/bash -c "python -m pip install --no-cache-dir --user --upgrade https://storage.googleapis.com/tensorflow/raspberrypi/tensorflow-1.14.0-cp27-none-linux_armv7l.whl"
RUN python -V
RUN /bin/bash && python2 -c "import wheel.pep425tags;print(wheel.pep425tags.get_supported())"
RUN /bin/bash && python2 -m pip2 install --no-cache-dir --ignore-installed --user --upgrade "https://storage.googleapis.com/tensorflow/raspberrypi/tensorflow-1.14.0-cp27-none-linux_armv7l.whl" 
#RUN /bin/bash -c "pip install --no-cache-dir --upgrade https://storage.googleapis.com/tensorflow/raspberrypi/tensorflow-1.14.0-cp27-cp27mu-linux_armv6l.whl"
#RUN /bin/bash -c "pip install --no-cache-dir --upgrade https://storage.googleapis.com/tensorflow-nightly/tensorflow-1.10.0-cp27-none-linux_armv7l.whl"

# RUN apt-get update -y && \
#   add-apt-repository ppa:deadsnakes/ppa -y && \
#   apt-get update -y && \
#   apt-get install -y python3.7-dev && \
#   ln -sf /usr/bin/python3.7 /usr/bin/python3


RUN mkdir -p /data/config
# TODO this is just for the default.yamls - these should really be taken from init_sd_card
RUN git clone https://github.com/duckietown/duckiefleet.git /data/config


ARG PIP_INDEX_URL
ENV PIP_INDEX_URL=${PIP_INDEX_URL}
RUN echo PIP_INDEX_URL=${PIP_INDEX_URL}

# Before installing
RUN echo PYTHONPATH=$PYTHONPATH
RUN pip3 install -U "pip>=20.2" pipdeptree
RUN pip install -U "pip>=20.2" pipdeptree

RUN pipdeptree
RUN pip list

# FIXME ros-commons is broken
RUN apt-get update && apt-get install -y libcairo2-dev libjpeg-dev libgif-dev

RUN pip3 install pycairo==1.19.1
RUN pip check


#COPY requirements.* ./
#RUN cat requirements.* > .requirements.txt
#RUN  pip3 install --use-feature=2020-resolver -r .requirements.txt



RUN echo PYTHONPATH=$PYTHONPATH
RUN pipdeptree
RUN pip list

# For ROS Agent - Need to upgrade Pillow for Old ROS stack
RUN pip3 install pillow --user --upgrade
RUN pip install pillow --user --upgrade


RUN mkdir submission_ws

COPY * submission_ws/src
#COPY launchers ./

# let's copy all our solution files to our workspace
# if you have more file use the COPY command to move them to the workspace
#COPY solution.py ./

# For ROS Agent - Additional Files
#COPY rosagent.py ./

# FIXME: what is this for? envs are not persisted
RUN /bin/bash -c "export PYTHONPATH="/usr/local/lib/python3.7/dist-packages:$PYTHONPATH""
RUN /bin/bash -c "export PYTHONPATH="/usr/local/lib/python2.7/dist-packages:$PYTHONPATH""

ENV HOSTNAME=agent
ENV VEHICLE_NAME=agent
ENV ROS_MASTER_URI=http://localhost:11311


RUN . /opt/ros/${ROS_DISTRO}/setup.sh && \
    . ${CATKIN_WS_DIR}/devel/setup.bash  && \
    catkin build --workspace /code/submission_ws


# Note: here we try to import the solution code
# so that we can check all of the libraries are imported correctly
RUN /bin/bash -c "source ${CATKIN_WS_DIR}/devel/setup.bash && python2 -c 'from solution import *'"

ENV DISABLE_CONTRACTS=1
CMD ["bash", "run_and_start.sh"]
